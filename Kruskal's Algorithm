package KruskalsAlgo;
import java.util.*;

class node //node class to store begining and ending edge with their weight
{
	//data members of class node
	int u;
	int v;
	int w;
	node(int u,int v,int w) //parameterized constructor
	{
		this.u=u;
		this.v=v;
		this.w=w;
	}
	
}

class EdgeComparator implements Comparator<node>
{
	 // comparator object uses this function passes in priority queue 
	//This function tell that priority queue is prioritized on the basis of weight of the edges of class node
	public int compare(node n1 , node n2)
	{
		if(n1.w > n2.w) return 1;
		else if(n1.w < n2.w) return -1;
		
		return 0;
	}
}

class mst
{
	ArrayList arr; //to add nodes of mst
	node[] sets; //to store the input set(u,v,w)
	PriorityQueue<node> pq; //adds set in ascending order of weight 
	int parent[]; //it stores the parent number of each vertex
	
	public mst() //default constructor
	{
		arr = new ArrayList<node>();
		pq = new PriorityQueue<node>(new EdgeComparator());
	}
	
	public void initializeParent() //intialize vertices parent to its own index numbers
	{
		for(int i = 0 ; i < parent.length ; i++)
		{
			parent[i] = i;
		}
	}
	
	public int findParent(int p) //finds the parent of p nad returns it
	{
		while( p!= parent[p])
		{
			p = parent[p];
		}
		return p;
	}
	public void acceptSet() //accepts graph
	{
		Scanner Sc = new Scanner(System.in);
		
		System.out.print("Enter the total number of offices(vertices) = ");
		int tv = Sc.nextInt();
		parent = new int[tv];

		System.out.print("Enter the total number of edges = ");
		int e = Sc.nextInt();
		
		sets = new node[e];

		for(int i = 0 ; i < e ; i++) //loop till number of edges
		{
			System.out.println();
			System.out.println("For edge " + (i+1));
			
			System.out.print("Enter starting office no = ");
			int u = Sc.nextInt();
			
			System.out.print("Enter ending ofice no = ");
			int v = Sc.nextInt();
			
			System.out.print("Enter distance = ");
			int w = Sc.nextInt();
			
			sets[i] = new node(u,v,w);
			pq.add(sets[i]);
		}
		
	}
	
	public void displaySet() //displays the accepted graph
	{
		System.out.println("Graph in (u, v, w) format :");
		for(int i = 0 ; i < sets.length ; i++) //loop till number of vertices
		{
			System.out.println("( " + sets[i].u + " " + sets[i].v + " " + sets[i].w + " )" );
		}
		
	}
	
	public int mstAlgo() //calculates minimum cost and returns it
	{
		int cost = 0;
		Iterator itr = pq.iterator(); //iterator for priority queue
		initializeParent(); //intialize vertices parent to its own index numbers
		
		while(itr.hasNext()) 
		{
			node n = pq.poll(); //it removes and returns the peek element of priority queue 
			int i = n.u;
			int j = n.v;
			i = findParent(i); //finds the parent of i
			j = findParent(j); //finds the parent of j
			if(i != j) //if i and j belongs to different components
			{
				cost = cost + n.w;
				parent[j] = i;
				arr.add(n); //adds the selected set to queue
			}
		}
		return cost;
	}
	
	public void displayMST() //displays mst graph 
	{
		Iterator<node> itr = arr.iterator();
		System.out.println("MST in (u, v, w) format :");
		System.out.println("Edges connecting all branches with minimum cost are :");
		while(itr.hasNext())
		{
			node n = itr.next();
			System.out.println("( " + n.u + " " + n.v + " " + n.w + " )" );
		}
	}
}

public class KruskalsAlgo {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		
		Scanner Sc = new Scanner(System.in);
		mst g = new mst(); //object of class g
		int ch = 0;
		do
		{
			do
			{
				System.out.println();
				System.out.println("MENU");
				System.out.println("1. Accept graph");
				System.out.println("2. Display graph");
				System.out.println("3. Display MST");
				System.out.println("0. Exit");
				
				System.out.print("Enter your choice = ");
				ch = Sc.nextInt();
				
				if(ch < 0 || ch > 3) //validation
				{
					System.out.println("Invalid choice, enter again.");
				}
			}while(ch < 0 || ch > 3);
			switch(ch)
			{
			case 1:
				g.acceptSet();
				break;

			case 2:
				g.displaySet();
				break;
				
			case 3:
				int cost = g.mstAlgo();
				g.displayMST();
				System.out.println("Total cost = " + cost);
				break;
				
			case 0:
				System.out.println("Thank you!");
				break;
			}
		}while(ch != 0);
	}

}
